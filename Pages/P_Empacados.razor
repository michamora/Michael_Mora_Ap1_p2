@page "/P_Empacados"

@page "/P_Empacados/{EntradaEmpacadosId:int}"

@*............................ Entrada de productos empacados ............................*@

@inject IToastService toastService

<EditForm Model="entradaEmpacados" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

     <div class="card shadow-lg">

        <div class="card align-items-center">

            <div class="card-header align-items-center">
                
                <h3 class="card-title">Entrada de productos Empacados
                      <div class="  oi oi-box" ></div>
                </h3>
            </div>

            @*................... Buscar ...................*@

            <div class="card-body">

                <div class="form-group align-items-right">

                    <div class="form-row">

                        <label>Id</label>

                        <div class="input-group">

                            <InputNumber @bind-Value="entradaEmpacados.EmpacadosId " class="form-control col-4 col" />
                    
                            <div class="input-group-append col">
                                <button type="button" class="btn btn-primary input-group-text "
                                    @onclick="Buscar"><span class="oi oi-magnifying-glass"></span></button>
                            </div>
                        </div>
                    </div>                 
                </div>

               <br>

                 @*................... Fecha ...................*@
                <div class="row">
                <div class="form-group">
                    <label>Fecha</label>
                    <InputDate @bind-Value="entradaEmpacados.Fecha" />                  
                </div>
 

                    @*................... Concepto ...................*@
                    <div class="form-group mt-3">
                        <label>Concepto</label>
                        <InputText class="form-control" @bind-Value="entradaEmpacados.Concepto" placeholder="Concepto Producto"/>
                        <ValidationMessage For="@(() => entradaEmpacados.Concepto)" />
                    </div>
                </div>

                <br> @* br Da espacios *@

                     @* hr Una linea *@

                      @*........................... Utilizados ...........................*@
                       
                <div class="card align-items">
                    <div class="row">                    
                        <h3>Utilizados</h3>
                   
                      @*................... Producto ...................*@
                    <div class="form-group col ">
                        <label>Producto</label>
                          <InputSelect class="form-select text-14" @bind-Value="Idproducto"> 
                            <option disabled value="">   Seleccione un producto   </option>
                            @foreach (var item in ListaDeProductos) 
                                {
                                    <option value="@item.ProductoId.ToString()" >@item.Descripcion</option>                                 
                                }                               
                            </InputSelect>
                            <ValidationMessage For="@(() => entradaEmpacados.ProductoId)" />
                            </div>

                       @*................... Cantidad Utilizada ...................*@

                    <div class="form-group col">
                        <label>Cantidad</label>
                        <InputNumber class="form-control" @bind-Value=" entradaEmpacados.CantidadUtilizada"/>
                        <ValidationMessage For="@(() => entradaEmpacados.CantidadUtilizada)" />                      
                    </div>

                       
                       @*................... Boton Add ...................*@

                    <div class="form-group col-2">
                      <button type="button" class="btn btn-primary" @onclick="AgregarProducto">
                      <span class="oi oi-plus">Add</span>
                      </button>
                    </div>
                 </div>

                    @*................... Producto Id | Descripcion | Cantidad ...................*@

                       <br> 
                        <table class="table table-light">
                            <thead class="thead-dark">
                                <tr class="table-light">
                                    
                                    <th>ProductoId</th>

                                    <th>Descripci&oacute;n</th>

                                    <th>Cantidad</th>

                                </tr>
                            </thead>
                        <tbody>
                               
                                @foreach (var item in entradaEmpacados.EmpacadosDetalle)
                                {
                                    
                                    <tr>
                                       
                                        <td>@item.EmpacadosDetalleId</td>
                                        <td>@item.producto.Descripcion</td>
                                        <td>@entradaEmpacados.CantidadUtilizada</td>

                                        <td><span class="oi oi-trash text-danger oi oi-x" href="#"  title='Remover Producto'
                                          @onclick=" (() => RemoverProducto(item)) "> </span></td>
                                    </tr>                                
                                }
            
                            </tbody>
                        </table>
                    <br>
                         @*................... Peso ...................*@

                    <div class="form-group mt-8 ">
                        <label>Peso Total</label>
                        <InputNumber readonly class="form-group col" placeholder="Disabled input" aria-label="Disabled input example" disabled @bind-Value="entradaEmpacados.PesoTotal" />
                        <label>Gr</label>
                        
                    </div>
                           <br>
                    </div>
                           <br>

                      @*........................... Producidos ...........................*@
                       
                <div class="card align-items">
                    <div class="row">                    
                        <h3>Producido</h3>
                                     
                    <div class="form-group col ">
                        <label>Producto</label>
                                    
                        <InputSelect class="form-select text-14" @bind-Value="entradaEmpacados.ProductoId"> 
                            <option disabled value='0'>   Seleccione un producto   </option>
                            @foreach (var item in ListaDeProductos)
                                {
                                     <option value="@item.ProductoId" >@item.Descripcion</option>                                    
                                } 
                         </InputSelect> 
                         <ValidationMessage For="@(() => entradaEmpacados.ProductoId)" />

                       </div>

                       @*................... Cantidad Producidos ...................*@
                    <div class="form-group col">
                        <label>Cantidad</label>
                        <InputNumber class="form-control" @bind-Value="entradaEmpacados.CantidadProducida" @onblur="CantidadProducidaChanged"/>
                        <ValidationMessage For="@(() => entradaEmpacados.CantidadProducida)" />
                
                </div>
            </div>                  
        </div>
    </div>
                   
                   @*........................... Botones ...........................*@

                <div class="card-footer">

                <div class="form-group text-center" display: inline-block>
                    
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                    <span class="oi oi-plus"> Nuevo</span>
                    </button>
                    
                    <button type="submit" class="btn btn-lg btn-success" >
                    <span class="oi oi-clipboard"> Guardar</span>
                    </button>

                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                    <span class="oi oi-circle-x"> Eliminar</span>
                    </button>

                </div>
            </div>
        </div>
    </div>
            


</EditForm>

@code { 

    #nullable disable // Para quitar el aviso de nulls
    

    [Parameter]
    public int EntradaEmpacadosId { get; set; }
   
    public EntradaEmpacados entradaEmpacados { get; set; } = new EntradaEmpacados();
    public EmpacadosDetalle empacadosDetalle { get; set; } = new EmpacadosDetalle();
    public List<Productos> ListaDeProductos { get; set; } = new List<Productos>(); 

    public Productos producto { get; set; } = new Productos();

    private double Peso {get; set; } = 0;

    private string Idproducto { get; set; } = "";

    [Inject]
    public ProductoBLL productoBLL { get; set; } // Inyectando BLL Productos

    [Inject]
    public EntradaEmpacadosBLL entradaEmpacadosBLL { get; set; } // Inyectando BLL Entrada empacados


     protected override void OnInitialized()
    {
         this.entradaEmpacados.EmpacadosId = EntradaEmpacadosId;
         
         Buscar();

         ListaDeProductos = productoBLL.GetListaProductos(p => true);
    }

    protected void Buscar() // Buscar productos empacados
    {
        if (this.entradaEmpacados.EmpacadosId > 0)
        { 
            var encontrado = entradaEmpacadosBLL.Buscar(this.entradaEmpacados.EmpacadosId);
            
            if (encontrado != null)
            {        
                this.entradaEmpacados = encontrado;
                
                toastService.ShowSuccess($"Producto : {entradaEmpacados.Concepto}, encontrado");
                // Indicando el concepto del producto encontrado
            }
            else
            {
                toastService.ShowError($"Id : {entradaEmpacados.EmpacadosId}, no esta registrado");
            }
        }
    
    }
    
  
     public void AgregarProducto() // Agregar producto utilizado
    {  
         
          this.producto = productoBLL
          .Buscar(Utilidad.ToInt(Idproducto));

          this.empacadosDetalle.producto = producto;
         
          this.empacadosDetalle.EmpacadosDetalleId = producto.ProductoId; // Id Producto utilizado
          this.entradaEmpacados.CantidadUtilizada = entradaEmpacados.CantidadUtilizada;
          CalcularPesoUtilizado();
         
   
            bool existe = entradaEmpacados
            .EmpacadosDetalle.Any(p => p
            .EmpacadosDetalleId == empacadosDetalle
            .EmpacadosDetalleId);

            if (!existe) 
            {
            toastService.ShowInfo("Detalle agregado");
            this.entradaEmpacados.EmpacadosDetalle.Add(this.empacadosDetalle); // Agregando el detalle

            }
            
            this.empacadosDetalle = new EmpacadosDetalle();
            this.producto = new Productos();

            
    }

     private void CantidadProducidaChanged() 
    {
        var esta = productoBLL.Buscar(entradaEmpacados.ProductoId);

        if(esta!=null)

        Peso = entradaEmpacados.CantidadProducida * producto.Peso;
            
    }

     private void RemoverProducto(EmpacadosDetalle item) // Remover detalle producto empacado
    {
        toastService.ShowInfo("Producto removido");
        this.entradaEmpacados.EmpacadosDetalle.Remove(item);
        RemoverPeso();
        
    }
     public void Nuevo() // Nuevo producto empacado
    {
        toastService.ShowSuccess("Nuevo producto");
        this.entradaEmpacados = new EntradaEmpacados();
        this.empacadosDetalle = new EmpacadosDetalle();
  
    }
    
    public void CalcularPesoProducido() // Peso producido
    {    
         Peso += entradaEmpacados.CantidadUtilizada * empacadosDetalle.producto.Peso;    
    }

    public void CalcularPesoUtilizado() // Peso utilizado
    {
         entradaEmpacados.PesoTotal += entradaEmpacados.CantidadUtilizada * empacadosDetalle.producto.Peso;
    }

     public void CalculoValorInventario() // Actualizar valor inventario
    {       
         producto.ValorInventario = producto.Existencia * producto.Costo; 
    }

     public void RemoverPeso() 
    {      
         entradaEmpacados.PesoTotal -= entradaEmpacados.CantidadUtilizada * empacadosDetalle.producto.Peso;   
    }

       public void Guardar() // Guardar productos empacados
       {
           CalcularPesoUtilizado();
           CalcularPesoProducido();
           CalculoValorInventario();
        
        if (entradaEmpacadosBLL.Guardar(entradaEmpacados))
        {
            
            toastService.ShowSuccess($"Producto : {entradaEmpacados.Concepto}, se guardó exitosamente");
            // Indicando el concepto del producto guardado

             this.entradaEmpacados = new EntradaEmpacados(); 
             this.empacadosDetalle = new EmpacadosDetalle();
        }
        else
            toastService.ShowError("No se pudo guardar.");
           
       }

     public void Eliminar() // Eliminar productos empacados
    {
        if (entradaEmpacadosBLL.Eliminar(entradaEmpacados.EmpacadosId))
        {
            this.entradaEmpacados = new EntradaEmpacados();
            this.empacadosDetalle = new EmpacadosDetalle();

            toastService.ShowSuccess("Producto eliminado con exito");
        }
        else
        {
            toastService.ShowError("Eliminación fallida");
        }
    }

}

